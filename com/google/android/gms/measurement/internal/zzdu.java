package com.google.android.gms.measurement.internal;

import android.content.Context;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.internal.measurement.zzhf;
import com.google.android.gms.internal.measurement.zzhq;
import com.google.android.gms.internal.measurement.zznn;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

@VisibleForTesting
public final class zzdu {
    public static final List a;
    public static final Set b;
    public static final zzdt zzA;
    public static final zzdt zzB;
    public static final zzdt zzC;
    public static final zzdt zzD;
    public static final zzdt zzE;
    public static final zzdt zzF;
    public static final zzdt zzG;
    public static final zzdt zzH;
    public static final zzdt zzI;
    public static final zzdt zzJ;
    public static final zzdt zzK;
    public static final zzdt zzL;
    public static final zzdt zzM;
    public static final zzdt zzN;
    public static final zzdt zzO;
    public static final zzdt zzP;
    public static final zzdt zzQ;
    public static final zzdt zzR;
    public static final zzdt zzS;
    public static final zzdt zzT;
    public static final zzdt zzU;
    public static final zzdt zzV;
    public static final zzdt zzW;
    public static final zzdt zzX;
    public static final zzdt zzY;
    public static final zzdt zzZ;
    public static final zzdt zza;
    public static final zzdt zzaa;
    public static final zzdt zzab;
    public static final zzdt zzac;
    public static final zzdt zzad;
    public static final zzdt zzae;
    public static final zzdt zzaf;
    public static final zzdt zzag;
    public static final zzdt zzah;
    public static final zzdt zzai;
    public static final zzdt zzaj;
    public static final zzdt zzak;
    public static final zzdt zzal;
    public static final zzdt zzam;
    public static final zzdt zzan;
    public static final zzdt zzao;
    public static final zzdt zzap;
    public static final zzdt zzaq;
    public static final zzdt zzar;
    public static final zzdt zzas;
    public static final zzdt zzat;
    public static final zzdt zzau;
    public static final zzdt zzb;
    public static final zzdt zzc;
    public static final zzdt zzd;
    public static final zzdt zze;
    public static final zzdt zzf;
    public static final zzdt zzg;
    public static final zzdt zzh;
    public static final zzdt zzi;
    public static final zzdt zzj;
    public static final zzdt zzk;
    public static final zzdt zzl;
    public static final zzdt zzm;
    public static final zzdt zzn;
    public static final zzdt zzo;
    public static final zzdt zzp;
    public static final zzdt zzq;
    public static final zzdt zzr;
    public static final zzdt zzs;
    public static final zzdt zzt;
    public static final zzdt zzu;
    public static final zzdt zzv;
    public static final zzdt zzw;
    public static final zzdt zzx;
    public static final zzdt zzy;
    public static final zzdt zzz;

    static {
        zzdu.a = Collections.synchronizedList(new ArrayList());
        zzdu.b = Collections.synchronizedSet(new HashSet());
        zzdu.zza = zzdu.a("measurement.ad_id_cache_time", 10000L, 10000L, () -> zznn.zzb());
        zzdu.zzb = zzdu.a("measurement.monitoring.sample_period_millis", 86400000L, 86400000L, () -> zznn.zzl());
        zzdu.zzc = zzdu.a("measurement.config.cache_time", 86400000L, 3600000L, () -> zznn.zzd());
        zzdu.zzd = zzdu.a("measurement.config.url_scheme", "https", "https", () -> zznn.zzK());
        zzdu.zze = zzdu.a("measurement.config.url_authority", "app-measurement.com", "app-measurement.com", zzcl.zza);
        zzdu.zzf = zzdu.a("measurement.upload.max_bundles", 100, 100, () -> ((int)zznn.zzw()));
        zzdu.zzg = zzdu.a("measurement.upload.max_batch_size", 0x10000, 0x10000, () -> ((int)zznn.zzE()));
        zzdu.zzh = zzdu.a("measurement.upload.max_bundle_size", 0x10000, 0x10000, () -> ((int)zznn.zzv()));
        zzdu.zzi = zzdu.a("measurement.upload.max_events_per_bundle", 1000, 1000, () -> ((int)zznn.zzz()));
        zzdu.zzj = zzdu.a("measurement.upload.max_events_per_day", 100000, 100000, () -> ((int)zznn.zzA()));
        zzdu.zzk = zzdu.a("measurement.upload.max_error_events_per_day", 1000, 1000, () -> ((int)zznn.zzy()));
        zzdu.zzl = zzdu.a("measurement.upload.max_public_events_per_day", 50000, 50000, () -> ((int)zznn.zzB()));
        zzdu.zzm = zzdu.a("measurement.upload.max_conversions_per_day", 10000, 10000, () -> ((int)zznn.zzx()));
        zzdu.zzn = zzdu.a("measurement.upload.max_realtime_events_per_day", 10, 10, () -> ((int)zznn.zzD()));
        zzdu.zzo = zzdu.a("measurement.store.max_stored_events_per_app", 100000, 100000, () -> ((int)zznn.zzg()));
        zzdu.zzp = zzdu.a("measurement.upload.url", "https://app-measurement.com/a", "https://app-measurement.com/a", () -> zznn.zzL());
        zzdu.zzq = zzdu.a("measurement.upload.backoff_period", 43200000L, 43200000L, () -> zznn.zzs());
        zzdu.zzr = zzdu.a("measurement.upload.window_interval", 3600000L, 3600000L, () -> zznn.zzH());
        zzdu.zzs = zzdu.a("measurement.upload.interval", 3600000L, 3600000L, () -> zznn.zzu());
        zzdu.zzt = zzdu.a("measurement.upload.realtime_upload_interval", 10000L, 10000L, () -> zznn.zzm());
        zzdu.zzu = zzdu.a("measurement.upload.debug_upload_interval", 1000L, 1000L, () -> zznn.zze());
        zzdu.zzv = zzdu.a("measurement.upload.minimum_delay", 500L, 500L, () -> zznn.zzk());
        zzdu.zzw = zzdu.a("measurement.alarm_manager.minimum_interval", 60000L, 60000L, () -> zznn.zzj());
        zzdu.zzx = zzdu.a("measurement.upload.stale_data_deletion_interval", 86400000L, 86400000L, () -> zznn.zzp());
        zzdu.zzy = zzdu.a("measurement.upload.refresh_blacklisted_config_interval", 604800000L, 604800000L, () -> zznn.zzn());
        zzdu.zzz = zzdu.a("measurement.upload.initial_upload_delay_time", 15000L, 15000L, () -> zznn.zzt());
        zzdu.zzA = zzdu.a("measurement.upload.retry_time", 1800000L, 1800000L, () -> zznn.zzG());
        zzdu.zzB = zzdu.a("measurement.upload.retry_count", 6, 6, () -> ((int)zznn.zzF()));
        zzdu.zzC = zzdu.a("measurement.upload.max_queue_time", 2419200000L, 2419200000L, () -> zznn.zzC());
        zzdu.zzD = zzdu.a("measurement.lifetimevalue.max_currency_tracked", 4, 4, () -> ((int)zznn.zzf()));
        zzdu.zzE = zzdu.a("measurement.audience.filter_result_max_count", 200, 200, () -> ((int)zznn.zzi()));
        zzdu.zzF = zzdu.a("measurement.upload.max_public_user_properties", 25, 25, null);
        zzdu.zzG = zzdu.a("measurement.upload.max_event_name_cardinality", 500, 500, null);
        zzdu.zzH = zzdu.a("measurement.upload.max_public_event_params", 25, 25, null);
        zzdu.zzI = zzdu.a("measurement.service_client.idle_disconnect_millis", 5000L, 5000L, () -> zznn.zzo());
        zzdu.zzJ = zzdu.a("measurement.test.boolean_flag", Boolean.FALSE, Boolean.FALSE, zzbq.zza);
        zzdu.zzK = zzdu.a("measurement.test.string_flag", "---", "---", zzbr.zza);
        zzdu.zzL = zzdu.a("measurement.test.long_flag", -1L, -1L, zzbs.zza);
        zzdu.zzM = zzdu.a("measurement.test.int_flag", -2, -2, zzbt.zza);
        zzdu.zzN = zzdu.a("measurement.test.double_flag", -3.0, -3.0, zzbv.zza);
        zzdu.zzO = zzdu.a("measurement.experiment.max_ids", 50, 50, zzbw.zza);
        zzdu.zzP = zzdu.a("measurement.max_bundles_per_iteration", 100, 100, zzbx.zza);
        zzdu.zzQ = zzdu.a("measurement.sdk.attribution.cache.ttl", 604800000L, 604800000L, zzby.zza);
        zzdu.zzR = zzdu.a("measurement.redaction.app_instance_id.ttl", 7200000L, 7200000L, zzca.zza);
        zzdu.zzS = zzdu.a("measurement.collection.log_event_and_bundle_v2", Boolean.TRUE, Boolean.TRUE, zzcb.zza);
        zzdu.zzT = zzdu.a("measurement.quality.checksum", Boolean.FALSE, Boolean.FALSE, null);
        zzdu.zzU = zzdu.a("measurement.audience.use_bundle_end_timestamp_for_non_sequence_property_filters", Boolean.FALSE, Boolean.FALSE, zzcc.zza);
        zzdu.zzV = zzdu.a("measurement.audience.refresh_event_count_filters_timestamp", Boolean.FALSE, Boolean.FALSE, zzcd.zza);
        zzdu.zzW = zzdu.a("measurement.audience.use_bundle_timestamp_for_event_count_filters", Boolean.FALSE, Boolean.FALSE, zzce.zza);
        zzdu.zzX = zzdu.a("measurement.sdk.collection.retrieve_deeplink_from_bow_2", Boolean.TRUE, Boolean.TRUE, zzcg.zza);
        zzdu.zzY = zzdu.a("measurement.sdk.collection.last_deep_link_referrer_campaign2", Boolean.FALSE, Boolean.FALSE, zzch.zza);
        zzdu.zzZ = zzdu.a("measurement.lifecycle.app_in_background_parameter", Boolean.FALSE, Boolean.FALSE, zzci.zza);
        zzdu.zzaa = zzdu.a("measurement.integration.disable_firebase_instance_id", Boolean.FALSE, Boolean.FALSE, zzcj.zza);
        zzdu.zzab = zzdu.a("measurement.collection.service.update_with_analytics_fix", Boolean.FALSE, Boolean.FALSE, zzck.zza);
        zzdu.zzac = zzdu.a("measurement.client.firebase_feature_rollout.v1.enable", Boolean.TRUE, Boolean.TRUE, zzcm.zza);
        zzdu.zzad = zzdu.a("measurement.client.sessions.check_on_reset_and_enable2", Boolean.TRUE, Boolean.TRUE, zzcn.zza);
        zzdu.zzae = zzdu.a("measurement.collection.synthetic_data_mitigation", Boolean.FALSE, Boolean.FALSE, zzco.zza);
        zzdu.zzaf = zzdu.a("measurement.service.storage_consent_support_version", 203600, 203600, zzcp.zza);
        zzdu.zzag = zzdu.a("measurement.client.click_identifier_control.dev", Boolean.FALSE, Boolean.FALSE, zzcr.zza);
        zzdu.zzah = zzdu.a("measurement.service.click_identifier_control", Boolean.FALSE, Boolean.FALSE, zzcs.zza);
        zzdu.zzai = zzdu.a("measurement.service.store_null_safelist", Boolean.TRUE, Boolean.TRUE, zzct.zza);
        zzdu.zzaj = zzdu.a("measurement.service.store_safelist", Boolean.TRUE, Boolean.TRUE, zzcu.zza);
        zzdu.zzak = zzdu.a("measurement.collection.enable_session_stitching_token.service", Boolean.FALSE, Boolean.FALSE, zzcv.zza);
        zzdu.zzal = zzdu.a("measurement.collection.enable_session_stitching_token.service_new", Boolean.TRUE, Boolean.TRUE, zzcw.zza);
        zzdu.zzam = zzdu.a("measurement.collection.enable_session_stitching_token.client.dev", Boolean.TRUE, Boolean.TRUE, zzcy.zza);
        zzdu.zzan = zzdu.a("measurement.session_stitching_token_enabled", Boolean.FALSE, Boolean.FALSE, zzcz.zza);
        zzdu.zzao = zzdu.a("measurement.redaction.e_tag", Boolean.TRUE, Boolean.TRUE, zzda.zza);
        zzdu.zzap = zzdu.a("measurement.redaction.client_ephemeral_aiid_generation", Boolean.TRUE, Boolean.TRUE, zzdc.zza);
        zzdu.zzaq = zzdu.a("measurement.redaction.retain_major_os_version", Boolean.TRUE, Boolean.TRUE, zzdd.zza);
        zzdu.zzar = zzdu.a("measurement.redaction.scion_payload_generator", Boolean.TRUE, Boolean.TRUE, zzde.zza);
        zzdu.zzas = zzdu.a("measurement.audience.dynamic_filters.oob_fix", Boolean.TRUE, Boolean.TRUE, zzdf.zza);
        zzdu.zzat = zzdu.a("measurement.service.clear_global_params_on_uninstall", Boolean.TRUE, Boolean.TRUE, zzdg.zza);
        zzdu.zzau = zzdu.a("measurement.sessionid.enable_client_session_id", Boolean.TRUE, Boolean.TRUE, zzdh.zza);
    }

    public static zzdt a(String s, Object object0, Object object1, zzdq zzdq0) {
        zzdt zzdt0 = new zzdt(s, object0, object1, zzdq0);
        zzdu.a.add(zzdt0);
        return zzdt0;
    }

    public static Map zzc(Context context0) {
        zzhf zzhf0 = zzhf.zza(context0.getContentResolver(), zzhq.zza("com.google.android.gms.measurement"), zzay.zza);
        return zzhf0 == null ? Collections.emptyMap() : zzhf0.zzc();
    }
}

